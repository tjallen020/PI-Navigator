// Prisma schema for QI Tool Selector

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  role        Role
  unit        String?
  preferences Json?
  sessions    Session[]
  createdAt   DateTime @default(now())
}

enum Role {
  FRONTLINE
  MANAGER
  FACILITATOR
  ADMIN
}

model Session {
  id                    String   @id @default(uuid())
  user                  User?    @relation(fields: [userId], references: [id])
  userId                String?
  answersJSON           Json
  selectedMode          String
  recommendedToolsJSON  Json
  sustainmentPlanJSON   Json
  metrics               Metric[]
  controlPlans          ControlPlan[]
  feedback              Feedback?
  createdAt             DateTime @default(now())
}

model Tool {
  id          String   @id @default(uuid())
  key         String   @unique
  namePlain   String
  nameTech    String
  description String
  category    String
  difficulty  String
  estTime     String
  pitfalls    String[]
  nextToolKeys String[]
  templates   String[]
  rationales  Rationale[]
  packages    ToolPackage[] @relation("ToolOnPackage", references: [id])
}

model ToolPackage {
  id             String   @id @default(uuid())
  name           String
  key            String   @unique
  description    String
  whenBest       String
  pitfalls       String[]
  toolKeys       String[]
  nextPackageIds String[]
  tools          Tool[]   @relation("ToolOnPackage", references: [id])
}

model DecisionNode {
  id          String   @id @default(uuid())
  key         String   @unique
  question    String
  pathTag     String
  data        Json
}

model Rationale {
  id        String @id @default(uuid())
  toolKey   String
  pathTag   String
  textPlain String
  textTech  String
  tool      Tool   @relation(fields: [toolId], references: [id])
  toolId    String
}

model Feedback {
  id              String   @id @default(uuid())
  session         Session  @relation(fields: [sessionId], references: [id])
  sessionId       String   @unique
  effectiveness   Int
  timeValueNote   String?
  recommendYN     Boolean
  notes           String?
  createdAt       DateTime @default(now())
}

model Metric {
  id        String   @id @default(uuid())
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId String
  name      String
  type      String
  unit      String
  baseline  String?
  target    String?
}

model ControlPlan {
  id          String   @id @default(uuid())
  session     Session  @relation(fields: [sessionId], references: [id])
  sessionId   String
  owner       String
  frequency   String
  kpis        String[]
  responsePlan String
  audits      Audit[]
}

model Audit {
  id            String   @id @default(uuid())
  controlPlan   ControlPlan @relation(fields: [controlPlanId], references: [id])
  controlPlanId String
  date          DateTime
  result        String
  notes         String?
}
